#!/usr/bin/env/python
# encoding: utf-8
'''
transdecoder_to_genome -- Convert outputted transcript coordinate to the appropriate genome coordinates.

transdecoder_to_genome is a tool for converting transcript coordinates to appropriate genome coordinate.
Expects the genome gff3 as input, along with the file transcripts file.

@author:     Steven Hill
            
@copyright:  2013 Donald Danforth Plant and Science Center. All rights reserved.
            
@contact:    shill@danforthcenter.org
'''

import sys 
import os
import Bio 

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-07-25'
__updated__ = '2013-07-25'

PROFILE = 0

def main(argv=None):
    '''Command line options.'''
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__
 
    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2013 user_name ()                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"
 
    if argv is None:
        argv = sys.argv[1:]
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-r", "--referencegff", dest="referencegff", help="Reference gff to use <FILE>", metavar="FILE")
        parser.add_option("-b", "--best_cand", dest="bestcandgff", help="Transdecoder best_candidates.eclipsed_orfs_removed.gff3 generated file <FILE>", metavar="FILE")
        parser.add_option("-f", "--referencefasta", dest="referencefasta", action="count", help="Reference fasta file <FILE>")
        
        
        # process options
        (opts, args) = parser.parse_args(argv)
        print opts
        
        if opts.referencegff:
            print "referencegff:", opts.referencegff
        if opts.bestcandgff:
            print("infile = %s" % opts.infile)
            print "bestcandidategff:", opts.bestcandgff
        if opts.referencefasta:
            print "reference fasta", opts.referencefasta
            
            
        # MAIN BODY #
        convert_trans_to_genome()
    
"""
    Each CDS will be relative to the transcript coordinates. that is, exon1 + exon2 + exon3 + ... + exonN
    These exons have their own associated reigon which can be found in the reference gff3 file.

    in our example file, passed.gff3 contains the coordinates of each exon per gene and contains the same ID as in
    the output .gff3 file. This is the first element on the line in the best_candidates.eclipsed_orfs_removed.gff3
    file.
    
    it is a part of the 8th element in the passed.gff3 file.
    
    additionally, if the best_candidates.eclipsed_orfs_removed.gff3 has a line that says its on the (-) strand,
    check the original file to see what it says, and invert it.
    
    Next, we need the original .fasta file so we can check the strandedness of each entry in the gff3 file. This
    let's us double check what we are doing.
    
    Finally, we need to build a new gff3 file that contains the CDS in genome coordinates.
    
    We cannot use th BCBio python package because it is not installed on the server, thus we will use our own gff3
    parser.
"""
def convert_trans_to_genome(original_gff, best_cands, original_fasta):
    pass

if __name__ == "__main__":
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'transdecoder_to_genome_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())