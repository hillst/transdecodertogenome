#!/usr/bin/env python
# encoding: utf-8
'''
transdecoder_to_genome -- Convert outputted transcript coordinate to the appropriate genome coordinates.

transdecoder_to_genome is a tool for converting transcript coordinates to appropriate genome coordinate.
Expects the genome gff3 as input, along with the file transcripts file.

@author:     Steven Hill
            
@copyright:  2013 Donald Danforth Plant Science Center. All rights reserved.
            
@contact:    shill@danforthcenter.org
'''

import sys 
import os
import Bio 
from Bio import SeqIO
import unittest

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-07-25'
__updated__ = '2013-07-25'

PROFILE = 1

def main(argv=None):
    '''Command line options.'''
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__
 
    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2013 Donald Danforth Plant Science Center                                           \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"
    run_tests = False
    print >> sys.stderr, "THIS IS NOT DONE, NEED TO DO MAKE THE + - LINE UP CORRECTLY"
    if argv is None:
        argv = sys.argv[1:]
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-r", "--referencegff", dest="referencegff", help="Reference gff to use <FILE>", metavar="FILE")
        parser.add_option("-b", "--best_cand", dest="bestcandgff", help="Transdecoder best_candidates.eclipsed_orfs_removed.gff3 generated file <FILE>", metavar="FILE")
        parser.add_option("-f", "--referencefasta", dest="referencefasta", help="Reference fasta file, used for validation during tests. <FILE>")
        
        
        # process options
        (opts, args) = parser.parse_args(argv)
        rg,bcg,rf = None,None,None
        if opts.referencegff:
            rg = opts.referencegff
        if opts.bestcandgff:
            bcg = opts.bestcandgff
        if opts.referencefasta:
            rf = opts.referencefasta
            print rf
        if rg == None or bcg == None:
            print "Expects three arguments."
            parser.print_help()
            return 2
            
        # MAIN BODY #
        #convert_trans_to_genome(rg, bcg, rf)
        """ MAKE ALL THIS SHIT UNIT TESTS PLEASE"""

        gene = {'start': 22302, 'stop': 23221, 'name': 'gene1', \
                'exons': ({'start': 22302, 'stop': 22379}, {'start':22485 , 'stop': 22621}, \
                          {'start': 23060, 'stop': 23150}, {'start':23195, 'stop': 23221})}
        transcript = {'name':'gene1', 'start': 1, 'stop': 333}
        """
        The following tests show that the sign showed in the gff file are irrelevant, the coordinates
        remain the same regardless.
        
        That is, if a negative sign is shown in the transdecoder.gff3 file, the output coordinates work, and to get the data you must
        slice the subsquence from exons.fasta, then reverse transcribe it.
        
        This will output the sequence in the transdecoder.cds file.
        """
        
        # + - CASE FOR PARTIAL
        """
            final[878:1190][::-1].translate(transtab) where final is the exons.fasta for something that was originally +.
            and the gff3 file said it is negative works correctly. that is, our coordinates provided by the gff3 file are
            correct for + in org - in the new. This means to get the sequence it needs to be reverse transcribed, but the
            coordinate themselves are correct.
        """
        gene = {'start': 67878, 'stop': 74308, 'name':'plusmin', 
                'exons': ({ 'start': 67878, 'stop': 68085 } , 
                          { 'start': 68882, 'stop': 68943 } , 
                          { 'start': 69034, 'stop': 69141 } ,
                          { 'start': 69683, 'stop': 69762 } ,
                          { 'start': 71555, 'stop': 71717 } ,
                          { 'start': 72187, 'stop': 72261 } ,
                          { 'start': 72370, 'stop': 72458 } ,
                          { 'start': 73151, 'stop': 73270 } ,
                          { 'start': 73918, 'stop': 73962 } ,
                          { 'start': 74066, 'stop': 74308 } 
                         )}
        transcript = {'name':'plusmin', 'start': 879, 'stop': 1190}
        # - - case
        """
            final[1003:1327][::-1].translate(trans) where final is the exons.fasta for somethinga that was originally -.
            The gff3 file from transdecoder also said -, which means to reverse transcribe the fasta file to get what was
            in the coding sequence. These are the coordinates found in the gff3, so we know they are correct.
        """
        gene = {'start': 5731958, 'stop': 5744344, 'name':'minmin', 
                'exons': ({ 'start': 5731958, 'stop': 5732148 } , 
                          { 'start': 5732445, 'stop': 5733573 } , 
                          { 'start': 5733673, 'stop': 5733929 } ,
                          { 'start': 5735453, 'stop': 5736066 } ,
                          { 'start': 5736111, 'stop': 5736553 } ,
                          { 'start': 5736642, 'stop': 5736953 } ,
                          { 'start': 5737039, 'stop': 5738345 } ,
                          { 'start': 5738598, 'stop': 5738961} ,
                          { 'start': 5739248, 'stop': 5739641 } ,
                          { 'start': 5739724, 'stop': 5740829 } ,
                          { 'start': 5741250, 'stop': 5743397 } ,
                          { 'start': 5743651, 'stop': 5744344 } 
                         )}
        transcript = {'name':'minmin', 'start': 1004, 'stop':1327}
        # - + case
        """
            Minus plus immediately finds the ATG at the start of the genome sequence, this is as expected,
            as the gff3 provided by transdecoder said +, and the genome sequence in exons.fasta and the 
            transdecoder coding sequence agree.
            
            found at final[0:957] (entire string haha)
        """
        gene = {'start': 26167, 'stop': 27852, 'name':'minplus', 
                'exons': ({ 'start': 26167, 'stop': 26599 } , 
                          { 'start': 26722, 'stop': 26764 } , 
                          { 'start': 27215, 'stop': 27494 } ,
                          { 'start': 27650, 'stop': 27852 } 
                         )}
         
        transcript = {'name':'minplus', 'start': 1, 'stop': 957}
        # + + case
        """
            Plus Plus works exactly as expected. No reverse transcription required. ATG appears immediately
            at final[522:3012], and the sequence in the transdecoder.cds match the subsequence.
        """
        gene = {'start': 74641, 'stop': 78761, 'name':'plusplus', 
                'exons': ({ 'start': 74641, 'stop': 76014 } , 
                          { 'start': 76111, 'stop': 76277 } , 
                          { 'start': 76368, 'stop': 76465 } ,
                          { 'start': 76558, 'stop': 76914 } ,
                          { 'start': 77029, 'stop': 77445 } ,
                          { 'start': 77628, 'stop': 78761 }
                         )}
        transcript = {'name':'plusplus', 'start': 523, 'stop':3012}
        
        """
        case that failed during run
        Broke because start and stop were in the same exon. This caused the range() function to create an empty list.
        Attempted fix was to call range(start,stop+1), and then in the function check if i == stop-1
        """
        gene = {'start': 29055, 'stop': 46004, 'name': 'TCONS_00001427', 'exons': 
                [{'start': 29055, 'stop': 29635}, 
                 {'start': 29755, 'stop': 29916}, 
                 {'start': 30060, 'stop': 30149}, 
                 {'start': 30763, 'stop': 30924}, 
                 {'start': 31008, 'stop': 31109}, 
                 {'start': 31408, 'stop': 31476}, 
                 {'start': 31563, 'stop': 31698}, 
                 {'start': 31778, 'stop': 31959},
                 {'start': 32909, 'stop': 33043}, 
                 {'start': 33128, 'stop': 33229}, 
                 {'start': 33331, 'stop': 33444}, 
                 {'start': 35010, 'stop': 35060}, 
                 {'start': 35165, 'stop': 35233}, 
                 {'start': 37301, 'stop': 37378}, 
                 {'start': 38378, 'stop': 38479}, 
                 {'start': 39604, 'stop': 39684}, 
                 {'start': 42031, 'stop': 42132}, 
                 {'start': 43293, 'stop': 43688}, 
                 {'start': 45586, 'stop': 46004}]}
        transcript = {'start': 2, 'stop': 175, 'name': 'TCONS_00001427'}
        
        if run_tests:
            unittest.main()   

        #print build_coordinates(gene, transcript)
        convert_trans_to_genome(rg, bcg)
    
"""
    Each CDS will be relative to the transcript coordinates. that is, exon1 + exon2 + exon3 + ... + exonN
    These exons have their own associated reigon which can be found in the reference gff3 file.

    in our example file, passed.gff3 contains the coordinates of each exon per gene and contains the same ID as in
    the output .gff3 file. This is the first element on the line in the best_candidates.eclipsed_orfs_removed.gff3
    file.
    
    it is a part of the 8th element in the passed.gff3 file.
    
    additionally, if the best_candidates.eclipsed_orfs_removed.gff3 has a line that says its on the (-) strand,
    check the original file to see what it says, and invert it.
    
    Next, we need the original .fasta file so we can check the strandedness of each entry in the gff3 file. This
    let's us double check what we are doing.
    
    Finally, we need to build a new gff3 file that contains the CDS in genome coordinates.
    
    We cannot use th BCBio python package because it is not installed on the server, thus we will use our own gff3
    parser.
    
    we're gona pipe output to stdout, optional input for file to write to
    
    I dont think we care about original fasta... maybe for robustness??? option?
"""

            #original_fasta = SeqIO.index(original_fasta, "fasta")
            #print original_fasta
            #print original_fasta['TCONS_00043934']
def convert_trans_to_genome(original_gff, best_cands):
    bc_lookup = {}
    with open(best_cands, "r") as bc:
        for line in bc:
            if len(line.split())  > 3 and "CDS" in line: #safe number??
                linearr = line.split()
                name = linearr[0]
                try:
                    bc_lookup[name].append((linearr, line))
                except KeyError:
                    bc_lookup[name] = []
                    bc_lookup[name].append((linearr, line))
      
    #print bc_lookup
    del linearr
    with open(original_gff, "r") as og:
        exon_list = []
        trans_coor = (0,0)
        last_trans = []
        for line in og:
            linearr = line.split()
            try:
                cur_gene = linearr[8]
            except:
                continue
            if linearr[2] == "exon":
                exon_list.append((linearr, line))
            elif "transcript" in linearr[2] or "mRNA" in linearr[2]:
                #startover
                partial = False
                if not partial: #keep partial tag
                    print line.strip()
                    pass
                if len(exon_list) > 0:
                    try:
                        # get the name
                        cur_gene = last_trans[8].split("=")[1].split(";")[0]
                        for trans in bc_lookup[cur_gene]:
                            transcript = {'name':cur_gene, 'start': int(trans[0][3]), 'stop': int(trans[0][4])}
                            genome_exon_list = []
                            for f in exon_list: 
                                genome_exon_list.append({'start': int(f[0][3]), 'stop': int(f[0][4])})
                                #sanity check
                                if not trans[0][0] in cur_gene:
                                    raise Exception("Wrong gene." + trans[0][0] + " " + cur_gene)
                            exons = {'start': trans_coor[0], 'stop': trans_coor[1], 'name': cur_gene, 'exons': genome_exon_list}
                            try:
                                #get genome coordinates
                                cds = build_coordinates(exons, transcript)
                                if len(cds) == 0:
                                    raise Exception("CDS empty")
                                for exon in exon_list:
                                        print exon[1].strip()
                                        for seq in cds:
                                            #if it is a part of or equal to this exon write it                                        
                                            if seq['start'] >= int(exon[0][3]) and seq['stop'] <= int(exon[0][4]):
                                                #change exon to CDS, put the CDS start at the start position and CDS end at end position.
                                                fin = exon[1].replace('exon', 'CDS').replace(exon[0][3],str(seq['start'])).replace(exon[0][4],str(seq['stop']))
                                                print fin.strip()
                                                break 
                                
                            except Exception as e:
                                print >> sys.stderr, e
                                print >> sys.stderr, "Error in Gene:"
                                print >> sys.stderr, "Exons", exons
                                print >> sys.stderr, "trans", transcript
                    except KeyError:
                        continue
                last_trans = linearr
                trans_coor = (int(linearr[3]), int(linearr[4]))

                exon_list = []    

                    
            #modify this if output flag is present
            else: 
                print line.strip()
    
    
    
"""
    This function should be responsible for building the genome coordinates and the exon coordinates and performing
    a translation from exon coordinates to genome coordinates.
    
    gene = {'start': '100', 'stop': '400', 'name': 'gene1', 'exons': ({'start': 100, 'stop': 149}, {'start': 200, 'end': 249}, {'start': 300, 'stop': 400})}    
    transcript = {genename: (start, stop)}
    
    returns gene_genome = <cds> ({"start":start, "stop":stop}, {"start":start,"stop":stop}, {"start":start,"stop":stop}... )
"""    
def build_coordinates(gene, transcript):
    if (gene['name'] != transcript['name']):
        err = "Gene names do not match." + str(gene['name'])+ " " + str(transcript['name'])
        raise Exception(err)
    #to build our list use range and add one to the end because range is exclusive and gff3 is inclusive
    genome_coords = []
    gene_list = []
    for exons in gene['exons']:
        genome_coords += range(exons['start'], exons['stop'] + 1)
        gene_list.append(range(exons['start'], exons['stop'] + 1))
    #finds the start and stop exons, all exons inbetween are also going to be written as CDS
    start, stop = None, None
    for genes in gene_list:
        if genome_coords[transcript['start']-1] in genes:
            start = gene_list.index(genes)
            start_idx = genes.index(genome_coords[transcript['start'] -1] )
        if genome_coords[transcript['stop'] - 1] in genes:
            stop = gene_list.index(genes)
            stop_idx = genes.index(genome_coords[transcript['stop'] - 1])
    cds = []
    for i in range(start, stop+1):
        cur_cds = gene['exons'][i]
        if i == start:
            cur_cds['start'] = gene_list[start][start_idx]
        elif i == stop-1:
            cur_cds['stop'] = gene_list[stop][stop_idx]
        cds.append(cur_cds)    
    return cds



class TransdecoderToGenomeTest(unittest.TestCase):
    """
    """
    def testSettingsJsonFields(self):
        self.assert_(True, "true")
    def testPriorityOrder(self):
        pass
    def testDirectoryRun(self):
        pass
    def testProcessAdd(self):
        pass

if __name__ == "__main__":
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'transdecoder_to_genome_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
